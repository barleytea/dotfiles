---
description: 
globs: 
alwaysApply: true
---
# dotfiles.mdc

## プロジェクト概要
このリポジトリは、macOS環境の設定を管理するdotfilesリポジトリです。Nix、Home Manager、nix-darwinを使用して環境構築を行います。

## 主要なコマンド

### Nix関連
- `just nix-channel-update`: nix-channelの更新
- `just home-manager-apply`: Home Managerの設定を適用
- `just nix-darwin-apply`: nix-darwinの設定を適用
- `just nix-update-all`: すべてのNix関連設定を更新

### VSCode関連
- `just vscode-apply`: VSCodeの設定を適用
- `just vscode-insiders-apply`: VSCode Insidersの設定を適用
- `just vscode-save`: VSCodeの拡張機能リストを保存

### その他
- `just npm-tools`: npm関連のツールをインストール
- `just zsh`: zshの起動時間を計測
- `just paths`: PATHの内容を表示

## ディレクトリ構造
- `home-manager/`: Home Managerの設定ファイル
- `darwin/`: nix-darwinの設定ファイル
- `vscode/`: VSCodeの設定ファイル
- `docs/`: ドキュメント
- `flake.nix`: Nix Flakesの設定ファイル
- `justfile`: タスクランナーの設定ファイル

## 注意事項
- 設定の変更後は適切なコマンドで設定を適用してください
- 特にNix関連の設定を変更した場合は、`just nix-update-all`を実行することを推奨します

## コーディングルール

### Nix関連
1. **パッケージの管理**
   - パッケージは基本的に`home-manager/default.nix`の`home.packages`で管理する
   - 特定のバージョンが必要なパッケージは、`getGolangciLint`のような関数を作成して管理する
   - パッケージのバージョンは`flake.lock`で固定する

2. **モジュール化**
   - 各設定は適切なディレクトリに分割して管理する
   - 共通のユーティリティ関数は`utils`ディレクトリに配置する
   - モジュール間の依存関係は`imports`で明示的に宣言する

3. **命名規則**
   - 設定ファイルは`default.nix`を使用する
   - モジュール名は小文字で、ハイフン区切りを使用する
   - 関数名はキャメルケースを使用する

### 設定ファイル
1. **構造化**
   - 関連する設定は同じディレクトリにまとめる
   - 設定の階層構造を明確にする
   - 共通の設定は上位の`default.nix`で管理する

2. **コメント**
   - 複雑な設定には適切なコメントを付ける
   - 設定の目的や理由を説明する
   - TODOやFIXMEは明確に記述する

3. **バージョン管理**
   - パッケージのバージョンは明示的に指定する
   - 依存関係の更新は慎重に行う
   - 変更履歴は適切にコミットメッセージに記録する

### その他
1. **セキュリティ**
   - 機密情報は含めない
   - パッケージのソースは信頼できるもののみを使用する
   - 必要な権限のみを付与する

2. **互換性**
   - macOS環境での動作を確認する
   - 異なるアーキテクチャ（Intel/Apple Silicon）に対応する
   - 依存関係の互換性を確認する

3. **ドキュメント**
   - 設定の変更は適切にドキュメント化する
   - トラブルシューティング情報を残す
   - セットアップ手順を明確にする



